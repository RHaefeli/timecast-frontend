
import javax.annotation.Generated;
import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;

/*
 * Auto generated code to render template /Index.rocker.html
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@Generated("com.fizzed.rocker.compiler.JavaGenerator") @SuppressWarnings("unused")
public class Index extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public final com.fizzed.rocker.ContentType CONTENT_TYPE = com.fizzed.rocker.ContentType.HTML;
    static public final String TEMPLATE_NAME = "Index.rocker.html";
    static public final String TEMPLATE_PACKAGE_NAME = "";
    static public final String HEADER_HASH = "1243303407";
    static public final String[] ARGUMENT_NAMES = { "title", "content" };

    // argument @ [1:2]
    private String title;
    // argument @ [1:2]
    private String content;

    public Index title(String title) {
        this.title = title;
        return this;
    }

    public String title() {
        return this.title;
    }

    public Index content(String content) {
        this.content = content;
        return this;
    }

    public String content() {
        return this.content;
    }

    static public Index template(String title, String content) {
        return new Index()
            .title(title)
            .content(content);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // <html lang=\"en-US\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <title>
        static private final byte[] PLAIN_TEXT_0_0;
        // </title>\n</head>\n<body>\n
        static private final byte[] PLAIN_TEXT_1_0;
        // \n</body>\n</html>\n
        static private final byte[] PLAIN_TEXT_2_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(Index.class.getClassLoader(), Index.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
        }

        // argument @ [1:2]
        protected final String title;
        // argument @ [1:2]
        protected final String content;

        public Template(Index model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(CONTENT_TYPE);
            __internal.setTemplateName(TEMPLATE_NAME);
            __internal.setTemplatePackageName(TEMPLATE_PACKAGE_NAME);
            this.title = model.title();
            this.content = model.content();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [1:37]
            __internal.aboutToExecutePosInTemplate(1, 37);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [5:12]
            __internal.aboutToExecutePosInTemplate(5, 12);
            __internal.renderValue(title, false);
            // PlainText @ [5:18]
            __internal.aboutToExecutePosInTemplate(5, 18);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // ValueExpression @ [8:1]
            __internal.aboutToExecutePosInTemplate(8, 1);
            __internal.renderValue(content, false);
            // PlainText @ [8:9]
            __internal.aboutToExecutePosInTemplate(8, 9);
            __internal.writeValue(PLAIN_TEXT_2_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "<html lang=\"en-US\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <title>";
        static private final String PLAIN_TEXT_1_0 = "</title>\n</head>\n<body>\n";
        static private final String PLAIN_TEXT_2_0 = "\n</body>\n</html>\n";

    }

}
